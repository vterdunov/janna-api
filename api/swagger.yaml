openapi: "3.0.1"

info:
  title: Janna API docs
  description: "Janna is a little REST API interface for VMware."
  version: '0.0.1'
  license:
    name: "MIT"
    url: http://opensource.org/licenses/MIT

servers:
- url: http://localhost:8080/
  description: localhost server

paths:
  /info:
    get:
      summary: "Information about the Janna build"
      tags:
      - Service state
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/build_info_response"


  /healthz:
    get:
      summary: "Liveness probe"
      tags:
      - Service state
      responses:
        '200':
          description: OK

  /readyz:
    get:
      summary: "Readiness probe"
      tags:
      - Service state
      responses:
        '200':
          description: OK

  /metrics:
    get:
      summary: "Service metrics"
      description: "Prometheus-style service metrics"
      tags:
      - Service state
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/metrics_response"
  /vm:
    get:
      summary: "Virtual Machines UUIDs and names list"
      description: Returns VMs list from default directory.
      tags:
      - Virtual Machines
      parameters:
      - name: X-Request-ID
        in: header
        schema:
          type: string
          format: uuid
      - name: datacenter
        in: query
        description: Datacenter name
        schema:
          type: string
          format: uuid
          minimum: 1
      - name: folder
        in: query
        description: Folder name to find VMs in. If the parameter was set 'resource_pool' will be ignored.
        schema:
          type: string
      - name: resource_pool
        in: query
        description: Resource pool to find VMs in. If 'folder' parameter was passed this parameter will be ignored.
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vm_list_response"
    post:
      summary: Deploy OVA file
      description: Deploy OVA file
      tags:
      - Virtual Machines
      parameters:
      - name: X-Request-ID
        in: header
        schema:
          type: string
          format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deploy_ova_body'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/with_task_id_response"

  /vm/{vm_uuid}:
    get:
      summary: "Get information about VM"
      tags:
      - Virtual Machines
      parameters:
      - name: X-Request-ID
        in: header
        schema:
          type: string
          format: uuid
      - name: vm_uuid
        in: path
        required: true
        description: VM UUID
        schema:
          type: string
          format: uuid
          minimum: 1
      - name: datacenter
        in: query
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vm_info_response"
    delete:
      summary: Delete Virtual Machine
      tags:
      - Virtual Machines
      parameters:
      - name: X-Request-ID
        in: header
        schema:
          type: string
          format: uuid
      - name: vm_uuid
        in: path
        required: true
        description: VM UUID
        schema:
          type: string
          format: uuid
          minimum: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                datacenter:
                  type: string
                  example: DC1
      responses:
        '200':
          description: OK

  /vm/{vm_uuid}/snapshots:
    get:
      summary: "List of VM snapshots"
      tags:
      - Virtual Machines
      - Snapshots
      parameters:
      - name: X-Request-ID
        in: header
        schema:
          type: string
          format: uuid
      - name: vm_uuid
        in: path
        required: true
        description: VM UUID
        schema:
          type: string
          minimum: 1
          format: uuid
      - name: datacenter
        in: query
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/snapshots"
    post:
      summary: "Create VM snapshot"
      tags:
      - Virtual Machines
      - Snapshots
      parameters:
      - name: X-Request-ID
        in: header
        schema:
          type: string
          format: uuid
      - name: vm_uuid
        in: path
        required: true
        description: VM UUID
        schema:
          type: string
          minimum: 1
          format: uuid
        examples:
          vm:
            summary: test
            value: vm1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_snapshot_body'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create_snapshot_response"

  /vm/{vm_uuid}/snapshots/{snapshot}:
    delete:
      summary: "Delete VM snapshot"
      tags:
      - Virtual Machines
      - Snapshots
      parameters:
      - name: X-Request-ID
        in: header
        schema:
          type: string
          format: uuid
      - name: vm_uuid
        in: path
        required: true
        description: VM UUID
        schema:
          type: string
          format: uuid
          minimum: 1
      - name: snapshot
        description: Snapshot ID
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: OK

  /vm/{vm_uuid}/revert/{snapshot}:
    post:
      summary: "Restore VM from snapshot"
      tags:
      - Virtual Machines
      - Snapshots
      parameters:
      - name: X-Request-ID
        in: header
        schema:
          type: string
          format: uuid
      - name: vm_uuid
        in: path
        required: true
        description: VM UUID
        schema:
          type: string
          minimum: 1
          format: uuid
      - name: snapshot
        in: path
        required: true
        description: Snapshot ID
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: OK

  /vm/{vm_uuid}/revert:
    post:
      summary: "Restore VM from current snapshot"
      tags:
      - Virtual Machines
      - Snapshots
      parameters:
      - name: X-Request-ID
        in: header
        schema:
          type: string
          format: uuid
      - name: vm_uuid
        in: path
        required: true
        description: VM UUID
        schema:
          type: string
          minimum: 1
          format: uuid
      - name: snapshot
        in: path
        required: true
        description: Snapshot ID
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: OK

  /vm/{vm_uuid}/roles:
    patch:
      summary: "Add role to VM"
      tags:
      - Virtual Machines
      - Permissions
      parameters:
      - name: X-Request-ID
        in: header
        schema:
          type: string
          format: uuid
      - name: vm_uuid
        in: path
        required: true
        description: VM UUID
        schema:
          type: string
          minimum: 1
          format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vm_add_role_body'
      responses:
        '200':
          description: OK
        '500':
          description: Error
          content:
            application/json::
              schema:
                $ref: "#/components/schemas/vm_add_role_error_response"

  /permissions/roles:
    get:
      summary: "List roles"
      tags:
      - Permissions
      parameters:
      - name: X-Request-ID
        in: header
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/permissions_roles_response"

  /find/vm:
    get:
      summary: "Find VM by path"
      tags:
      - Find
      parameters:
      - name: X-Request-ID
        in: header
        schema:
          type: string
          format: uuid
      - name: path
        in: query
        required: true
        description: Virtual Machine name or path. Wildcard supported.
        schema:
          type: string
      - name: datacenter
        in: query
        description: Datacenter name
        schema:
          type: string
          format: uuid
          minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json::
              schema:
                $ref: "#/components/schemas/find_vm_response"
        '500':
          description: Error
          content:
            application/json::
              schema:
                $ref: "#/components/schemas/find_vm_error_response"

  /status/{task_id}:
    get:
      summary: "Get information about backgroud task"
      tags:
      - Tasks
      parameters:
      - name: X-Request-ID
        in: header
        schema:
          type: string
          format: uuid
      - name: task_id
        in: path
        required: true
        description: Task ID
        schema:
          type: string
          format: uuid
          example: 6ef18379-6220-6f7e-30ca-1d1c20a3cc97
      responses:
        '200':
          description: OK
          content:
            application/json::
              schema:
                $ref: "#/components/schemas/task_id_response"

components:
  schemas:
    build_info_response:
      type: object
      properties:
        build_time:
          type: string
          format: date-time
        commit:
          type: string
          example: "c0c5f0a"

    metrics_response:
      type: string
      example: |-
        # HELP duration_API_request_duration_seconds Request duration in seconds.
        # TYPE duration_API_request_duration_seconds summary
        duration_API_request_duration_seconds{method="VMSnapshotsList",success="true",quantile="0.5"} 0.886037501
        duration_API_request_duration_seconds{method="VMSnapshotsList",success="true",quantile="0.9"} 0.891919249
        duration_API_request_duration_seconds{method="VMSnapshotsList",success="true",quantile="0.99"} 0.891919249
        duration_API_request_duration_seconds_sum{method="VMSnapshotsList",success="true"} 7.092656131
        duration_API_request_duration_seconds_count{method="VMSnapshotsList",success="true"} 8
        # HELP go_gc_duration_seconds A summary of the GC invocation durations.
        # TYPE go_gc_duration_seconds summary
        go_gc_duration_seconds{quantile="0"} 5.8395e-05
        go_gc_duration_seconds{quantile="0.25"} 5.8395e-05
        go_gc_duration_seconds{quantile="0.5"} 6.9086e-05
        go_gc_duration_seconds{quantile="0.75"} 8.9717e-05
        go_gc_duration_seconds{quantile="1"} 8.9717e-05

    vm_list_response:
      type: object
      example:
        "vm_list":
          "420502ba-0a60-311a-5c7b-0d7c3fec60a3": "my-vm1"
          "42050306-51f9-3b3d-8fbb-8ce6912e1f4c": "my-vm2"
          "42050646-6bed-ddfe-1f81-ddf8eae21a67": "my-vm3"

    vm_info_response:
      type: object
      properties:
        Config:
          type: object
          example:
            Annotation: Test annotation,
            Name: coreos
        Guest:
          type: object
        HeartBeat:
          type: object
        Runtime:
          type: object
          example:
            BootTime: 2018-05-14T23:18:10Z,
            Paused: true,
            PowerState: poweredOn

    create_snapshot_body:
      type: object
      required:
      - name
      properties:
        name:
          type: string
          example: "MySnapshot"
        description:
          type: string
          example: "This is a snapshot"

    create_snapshot_response:
      type: object
      example:
        "snapshot_id": 8

    snapshots:
      type: object
      properties:
        snapshots:
          type: array
          items:
            type: object
            example:
              name: "snapshot1"
              description: "My snapshot"
              id: 4
              created_at: "2018-05-17T08:54:35.251931Z"

    find_vm_response:
      type: object
      example:
        "uuid": "42053cb7-b8b7-904f-807e-9d18b1a366fb"
        "name": "my-vm"

    find_vm_error_response:
      type: object
      example:
        "error": "vm 'my-folder/my-vm' not found"

    vm_add_role_body:
      type: object
      required:
      - role_id
      - principal
      properties:
        role_id:
          type: integer
          example: 5
        principal:
          type: string
          example: "DOMAIN\\example.user"
        datacenter:
          type: string
          example: "DC1"

    vm_add_role_error_response:
      type: object
      example:
        "error": "ServerFaultCode: The user or group named 'DOMAIN\\example.user' does not exist."


    permissions_roles_response:
      type: object
      example:
        "roles":
        - "name": "com.vmware.Content.Admin"
          "id": -1775269336
          "description":
            "label": "Content library administrator (sample)"
            "summary": "Provides full access to Content Library service"
        - "name": "VirtualMachineUser"
          "id": 5,
          "description":
            "label": "Virtual machine user (sample)"
            "summary": "Provides virtual machine interaction permissions"

    task_id_response:
      type: object
      properties:
        task_id:
          type: string
      example:
        "status": "Starting deploy"

    deploy_ova_body:
      type: object
      properties:
        name:
          type: string
          example: Janna VM
        ova_url:
          type: string
          format: uri
          example: https://stable.release.core-os.net/amd64-usr/current/coreos_production_vmware_ova.ova
        datacenter:
          type: string
          example: DC1
        folder:
          type: string
          example: Dev VMs
        annotation:
          type: string
          example: This is an annotation of the deployed VM
        datastores:
          type: object
          properties:
            type:
              type: string
              description: "Storage type. Possible values: 'cluster', 'datastore'. If 'cluster' type was chosen then Janna try to get DRS recommendation to choose proper 'datastore'."
              example: cluster
            names:
              type: array
              items:
                type: string
                description: List of storages. One of them will be chosen randomly.
                example: DatastoreCluster1
          required:
            - type
        networks:
          type: object
          description: Network defines a mapping from each network inside the OVF to a ESXi network. The networks must be presented on the ESXi host.
          example:
            "VM Network": "esxi-net1"
        computer_resources:
          type: object
          properties:
            type:
              type: string
              description: "Computer resource type. Possible values: 'host', 'cluster', 'rp'."
              example: cluster
            path:
              type: string
              description: Name or path to a computer resource. The parameter Can be omitted, then Janna will try to get default computer resource.
              example: my-esxi-cluster
          required:
            - type
      required:
        - name
        - ova_url

    with_task_id_response:
      type: object
      properties:
        task_id:
          type: string
          format: uuid
      example:
        "task_id": "548f65e9-2f79-2af9-8641-be75088f43c5"
